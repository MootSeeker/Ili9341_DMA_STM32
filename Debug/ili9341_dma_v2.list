
ili9341_dma_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004938  08004938  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000298dc  20000020  08004954  00020020  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  200298fc  08004954  000298fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ce  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4a  00000000  00000000  00033112  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00036060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00037208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024e1c  00000000  00000000  00038228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e992  00000000  00000000  0005d044  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dfe58  00000000  00000000  0006b9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b82e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  0014b8ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000020 	.word	0x20000020
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048c8 	.word	0x080048c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000024 	.word	0x20000024
 80001ec:	080048c8 	.word	0x080048c8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_DMA_Init+0x3c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <MX_DMA_Init+0x3c>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_DMA_Init+0x3c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2103      	movs	r1, #3
 8000516:	203b      	movs	r0, #59	; 0x3b
 8000518:	f000 ffba 	bl	8001490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800051c:	203b      	movs	r0, #59	; 0x3b
 800051e:	f000 ffd3 	bl	80014c8 <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <vApplicationGetIdleTaskMemory+0x2c>)
 8000540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x30>)
 8000546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000003c 	.word	0x2000003c
 8000560:	20000090 	.word	0x20000090

08000564 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_FREERTOS_Init+0x30>)
 800056c:	1d3c      	adds	r4, r7, #4
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 ff70 	bl	8003466 <osThreadCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <MX_FREERTOS_Init+0x34>)
 800058a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bdb0      	pop	{r4, r5, r7, pc}
 8000594:	080048ec 	.word	0x080048ec
 8000598:	20003ff0 	.word	0x20003ff0

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 ffaa 	bl	80034fe <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b30      	ldr	r3, [pc, #192]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_GPIO_Init+0xe8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_GPIO_Init+0xe8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <MX_GPIO_Init+0xe8>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_GPIO_Init+0xe8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_DC_GPIO_Port, DISP_DC_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <MX_GPIO_Init+0xec>)
 800061c:	f001 fc7a 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <MX_GPIO_Init+0xf0>)
 8000628:	f001 fc74 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xf4>)
 8000632:	f001 fc6f 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_DC_Pin;
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISP_DC_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_GPIO_Init+0xec>)
 800064e:	f001 fab7 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_RST_Pin;
 8000652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISP_RST_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_GPIO_Init+0xf0>)
 800066c:	f001 faa8 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_GPIO_Init+0xf4>)
 8000688:	f001 fa9a 	bl	8001bc0 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020800 	.word	0x40020800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <ILI_Enable>:
	HAL_GPIO_WritePin(ILI_RST_PORT, ILI_RST_PIN, GPIO_PIN_SET);
}

/* Enable LCD display */
void ILI_Enable(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI_RST_PORT, ILI_RST_PIN, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <ILI_Enable+0x14>)
 80006b0:	f001 fc30 	bl	8001f14 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020000 	.word	0x40020000

080006bc <ILI_SPI_Write>:

/* Send command/data to LCD
 * (internal function) */
static inline HAL_StatusTypeDef ILI_SPI_Write(uint8_t Data,
		GPIO_PinState DC_PinState)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	if (DMA_Busy)
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <ILI_SPI_Write+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <ILI_SPI_Write+0x1e>
		return HAL_BUSY;
 80006d6:	2302      	movs	r3, #2
 80006d8:	e018      	b.n	800070c <ILI_SPI_Write+0x50>
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(ILI_CS_PORT, ILI_CS_PIN, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <ILI_SPI_Write+0x5c>)
 80006e0:	f001 fc18 	bl	8001f14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ILI_DC_PORT, ILI_DC_PIN, DC_PinState);
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <ILI_SPI_Write+0x60>)
 80006ec:	f001 fc12 	bl	8001f14 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&ILI_SPI_HANDLE, &Data, 1, 1);
 80006f0:	1df9      	adds	r1, r7, #7
 80006f2:	2301      	movs	r3, #1
 80006f4:	2201      	movs	r2, #1
 80006f6:	480a      	ldr	r0, [pc, #40]	; (8000720 <ILI_SPI_Write+0x64>)
 80006f8:	f002 f934 	bl	8002964 <HAL_SPI_Transmit>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ILI_CS_PORT, ILI_CS_PIN, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <ILI_SPI_Write+0x5c>)
 8000706:	f001 fc05 	bl	8001f14 <HAL_GPIO_WritePin>
	return result;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200002a2 	.word	0x200002a2
 8000718:	40020400 	.word	0x40020400
 800071c:	40020800 	.word	0x40020800
 8000720:	20029800 	.word	0x20029800

08000724 <ILI_Write_Command>:

/* Send command (char) to LCD */
HAL_StatusTypeDef ILI_Write_Command(uint8_t Command)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	return ILI_SPI_Write(Command, GPIO_PIN_RESET);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc2 	bl	80006bc <ILI_SPI_Write>
 8000738:	4603      	mov	r3, r0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <ILI_Write_Data>:

/* Send data (char) to LCD */
HAL_StatusTypeDef ILI_Write_Data(uint8_t Data)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
	return ILI_SPI_Write(Data, GPIO_PIN_SET);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffb3 	bl	80006bc <ILI_SPI_Write>
 8000756:	4603      	mov	r3, r0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <ILI_Set_Address>:

/* Set Address - Location block - to draw into
 * X, Y - start coordinates; W, H - block width and height */
void ILI_Set_Address(uint16_t X, uint16_t Y, uint16_t W, uint16_t H)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	4604      	mov	r4, r0
 8000768:	4608      	mov	r0, r1
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4623      	mov	r3, r4
 8000770:	80fb      	strh	r3, [r7, #6]
 8000772:	4603      	mov	r3, r0
 8000774:	80bb      	strh	r3, [r7, #4]
 8000776:	460b      	mov	r3, r1
 8000778:	807b      	strh	r3, [r7, #2]
 800077a:	4613      	mov	r3, r2
 800077c:	803b      	strh	r3, [r7, #0]
	uint16_t X2 = X + W - 1;
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	3b01      	subs	r3, #1
 8000788:	81fb      	strh	r3, [r7, #14]
	uint16_t Y2 = Y + H - 1;
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	4413      	add	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	81bb      	strh	r3, [r7, #12]

	Block_Width = W;
 8000796:	4a21      	ldr	r2, [pc, #132]	; (800081c <ILI_Set_Address+0xbc>)
 8000798:	887b      	ldrh	r3, [r7, #2]
 800079a:	8013      	strh	r3, [r2, #0]
	Block_Height = H;
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <ILI_Set_Address+0xc0>)
 800079e:	883b      	ldrh	r3, [r7, #0]
 80007a0:	8013      	strh	r3, [r2, #0]

	ILI_Write_Command(0x2A);
 80007a2:	202a      	movs	r0, #42	; 0x2a
 80007a4:	f7ff ffbe 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(X >> 8);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffc6 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(X);
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffc1 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(X2 >> 8);
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffba 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(X2);
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffb5 	bl	8000742 <ILI_Write_Data>

	ILI_Write_Command(0x2B);
 80007d8:	202b      	movs	r0, #43	; 0x2b
 80007da:	f7ff ffa3 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(Y >> 8);
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffab 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(Y);
 80007ec:	88bb      	ldrh	r3, [r7, #4]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffa6 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(Y2 >> 8);
 80007f6:	89bb      	ldrh	r3, [r7, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff9f 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(Y2);
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff9a 	bl	8000742 <ILI_Write_Data>

	ILI_Write_Command(0x2C);
 800080e:	202c      	movs	r0, #44	; 0x2c
 8000810:	f7ff ff88 	bl	8000724 <ILI_Write_Command>
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000002 	.word	0x20000002

08000824 <ILI_Set_Rotation>:

/* Set rotation of the screen
 * Use ILI_Set_Address to set correct Width and Height afterwards */
void ILI_Set_Rotation(uint8_t Rotation)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation_data;

	switch (Rotation)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b03      	cmp	r3, #3
 8000832:	d817      	bhi.n	8000864 <ILI_Set_Rotation+0x40>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <ILI_Set_Rotation+0x18>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	0800084d 	.word	0x0800084d
 8000840:	08000853 	.word	0x08000853
 8000844:	08000859 	.word	0x08000859
 8000848:	0800085f 	.word	0x0800085f
	{
	case SCREEN_VERTICAL_1:
		rotation_data = 0x40 | 0x08;
 800084c:	2348      	movs	r3, #72	; 0x48
 800084e:	73fb      	strb	r3, [r7, #15]
		break;
 8000850:	e009      	b.n	8000866 <ILI_Set_Rotation+0x42>
	case SCREEN_HORIZONTAL_1:
		rotation_data = 0x20 | 0x08;
 8000852:	2328      	movs	r3, #40	; 0x28
 8000854:	73fb      	strb	r3, [r7, #15]
		break;
 8000856:	e006      	b.n	8000866 <ILI_Set_Rotation+0x42>
	case SCREEN_VERTICAL_2:
		rotation_data = 0x80 | 0x08;
 8000858:	2388      	movs	r3, #136	; 0x88
 800085a:	73fb      	strb	r3, [r7, #15]
		break;
 800085c:	e003      	b.n	8000866 <ILI_Set_Rotation+0x42>
	case SCREEN_HORIZONTAL_2:
		rotation_data = 0x40 | 0x80 | 0x20 | 0x08;
 800085e:	23e8      	movs	r3, #232	; 0xe8
 8000860:	73fb      	strb	r3, [r7, #15]
		break;
 8000862:	e000      	b.n	8000866 <ILI_Set_Rotation+0x42>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8000864:	bf00      	nop
	}

	ILI_Write_Command(0x36);
 8000866:	2036      	movs	r0, #54	; 0x36
 8000868:	f7ff ff5c 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(rotation_data);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff67 	bl	8000742 <ILI_Write_Data>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ILI_Init>:

/* Initialize LCD */
void ILI_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	ILI_Enable();
 8000880:	f7ff ff10 	bl	80006a4 <ILI_Enable>

	// SOFTWARE RESET
	ILI_Write_Command(0x01);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff ff4d 	bl	8000724 <ILI_Write_Command>
	HAL_Delay(20);	// min 5ms before next cmd
 800088a:	2014      	movs	r0, #20
 800088c:	f000 fd26 	bl	80012dc <HAL_Delay>

	// POWER CONTROL A
	ILI_Write_Command(0xCB);
 8000890:	20cb      	movs	r0, #203	; 0xcb
 8000892:	f7ff ff47 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x39);
 8000896:	2039      	movs	r0, #57	; 0x39
 8000898:	f7ff ff53 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x2C);
 800089c:	202c      	movs	r0, #44	; 0x2c
 800089e:	f7ff ff50 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ff4d 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x34);
 80008a8:	2034      	movs	r0, #52	; 0x34
 80008aa:	f7ff ff4a 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x02);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f7ff ff47 	bl	8000742 <ILI_Write_Data>

	// POWER CONTROL B
	ILI_Write_Command(0xCF);
 80008b4:	20cf      	movs	r0, #207	; 0xcf
 80008b6:	f7ff ff35 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff41 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0xC1);
 80008c0:	20c1      	movs	r0, #193	; 0xc1
 80008c2:	f7ff ff3e 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x30);
 80008c6:	2030      	movs	r0, #48	; 0x30
 80008c8:	f7ff ff3b 	bl	8000742 <ILI_Write_Data>

	// DRIVER TIMING CONTROL A
	ILI_Write_Command(0xE8);
 80008cc:	20e8      	movs	r0, #232	; 0xe8
 80008ce:	f7ff ff29 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x85);
 80008d2:	2085      	movs	r0, #133	; 0x85
 80008d4:	f7ff ff35 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff32 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x78);
 80008de:	2078      	movs	r0, #120	; 0x78
 80008e0:	f7ff ff2f 	bl	8000742 <ILI_Write_Data>

	// DRIVER TIMING CONTROL B
	ILI_Write_Command(0xEA);
 80008e4:	20ea      	movs	r0, #234	; 0xea
 80008e6:	f7ff ff1d 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x00);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff29 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x00);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff ff26 	bl	8000742 <ILI_Write_Data>

	// POWER ON SEQUENCE CONTROL
	ILI_Write_Command(0xED);
 80008f6:	20ed      	movs	r0, #237	; 0xed
 80008f8:	f7ff ff14 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x64);
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f7ff ff20 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x03);
 8000902:	2003      	movs	r0, #3
 8000904:	f7ff ff1d 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x12);
 8000908:	2012      	movs	r0, #18
 800090a:	f7ff ff1a 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x81);
 800090e:	2081      	movs	r0, #129	; 0x81
 8000910:	f7ff ff17 	bl	8000742 <ILI_Write_Data>

	// PUMP RATIO CONTROL
	ILI_Write_Command(0xF7);
 8000914:	20f7      	movs	r0, #247	; 0xf7
 8000916:	f7ff ff05 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x20);
 800091a:	2020      	movs	r0, #32
 800091c:	f7ff ff11 	bl	8000742 <ILI_Write_Data>

	// POWER CONTROL,VRH[5:0]
	ILI_Write_Command(0xC0);
 8000920:	20c0      	movs	r0, #192	; 0xc0
 8000922:	f7ff feff 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x23);
 8000926:	2023      	movs	r0, #35	; 0x23
 8000928:	f7ff ff0b 	bl	8000742 <ILI_Write_Data>

	// POWER CONTROL,SAP[2:0];BT[3:0]
	ILI_Write_Command(0xC1);
 800092c:	20c1      	movs	r0, #193	; 0xc1
 800092e:	f7ff fef9 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x10);
 8000932:	2010      	movs	r0, #16
 8000934:	f7ff ff05 	bl	8000742 <ILI_Write_Data>

	// VCM CONTROL
	ILI_Write_Command(0xC5);
 8000938:	20c5      	movs	r0, #197	; 0xc5
 800093a:	f7ff fef3 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x3E);
 800093e:	203e      	movs	r0, #62	; 0x3e
 8000940:	f7ff feff 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x28);
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f7ff fefc 	bl	8000742 <ILI_Write_Data>

	// VCM CONTROL 2
	ILI_Write_Command(0xC7);
 800094a:	20c7      	movs	r0, #199	; 0xc7
 800094c:	f7ff feea 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x86);
 8000950:	2086      	movs	r0, #134	; 0x86
 8000952:	f7ff fef6 	bl	8000742 <ILI_Write_Data>

	// MEMORY ACCESS CONTROL
	ILI_Write_Command(0x36);
 8000956:	2036      	movs	r0, #54	; 0x36
 8000958:	f7ff fee4 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x48);
 800095c:	2048      	movs	r0, #72	; 0x48
 800095e:	f7ff fef0 	bl	8000742 <ILI_Write_Data>

	// PIXEL FORMAT
	ILI_Write_Command(0x3A);
 8000962:	203a      	movs	r0, #58	; 0x3a
 8000964:	f7ff fede 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x55);
 8000968:	2055      	movs	r0, #85	; 0x55
 800096a:	f7ff feea 	bl	8000742 <ILI_Write_Data>

	// FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI_Write_Command(0xB1);
 800096e:	20b1      	movs	r0, #177	; 0xb1
 8000970:	f7ff fed8 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x00);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fee4 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x18);
 800097a:	2018      	movs	r0, #24
 800097c:	f7ff fee1 	bl	8000742 <ILI_Write_Data>

	// DISPLAY FUNCTION CONTROL
	ILI_Write_Command(0xB6);
 8000980:	20b6      	movs	r0, #182	; 0xb6
 8000982:	f7ff fecf 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x08);
 8000986:	2008      	movs	r0, #8
 8000988:	f7ff fedb 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x82);
 800098c:	2082      	movs	r0, #130	; 0x82
 800098e:	f7ff fed8 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x27);
 8000992:	2027      	movs	r0, #39	; 0x27
 8000994:	f7ff fed5 	bl	8000742 <ILI_Write_Data>

	// 3GAMMA FUNCTION DISABLE
	ILI_Write_Command(0xF2);
 8000998:	20f2      	movs	r0, #242	; 0xf2
 800099a:	f7ff fec3 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x00);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fecf 	bl	8000742 <ILI_Write_Data>

	// GAMMA CURVE SELECTED
	ILI_Write_Command(0x26);
 80009a4:	2026      	movs	r0, #38	; 0x26
 80009a6:	f7ff febd 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x01);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fec9 	bl	8000742 <ILI_Write_Data>

	// POSITIVE GAMMA CORRECTION
	ILI_Write_Command(0xE0);
 80009b0:	20e0      	movs	r0, #224	; 0xe0
 80009b2:	f7ff feb7 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x0F);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff fec3 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x31);
 80009bc:	2031      	movs	r0, #49	; 0x31
 80009be:	f7ff fec0 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x2B);
 80009c2:	202b      	movs	r0, #43	; 0x2b
 80009c4:	f7ff febd 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0C);
 80009c8:	200c      	movs	r0, #12
 80009ca:	f7ff feba 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0E);
 80009ce:	200e      	movs	r0, #14
 80009d0:	f7ff feb7 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x08);
 80009d4:	2008      	movs	r0, #8
 80009d6:	f7ff feb4 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x4E);
 80009da:	204e      	movs	r0, #78	; 0x4e
 80009dc:	f7ff feb1 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0xF1);
 80009e0:	20f1      	movs	r0, #241	; 0xf1
 80009e2:	f7ff feae 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x37);
 80009e6:	2037      	movs	r0, #55	; 0x37
 80009e8:	f7ff feab 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x07);
 80009ec:	2007      	movs	r0, #7
 80009ee:	f7ff fea8 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x10);
 80009f2:	2010      	movs	r0, #16
 80009f4:	f7ff fea5 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x03);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f7ff fea2 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0E);
 80009fe:	200e      	movs	r0, #14
 8000a00:	f7ff fe9f 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x09);
 8000a04:	2009      	movs	r0, #9
 8000a06:	f7ff fe9c 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x00);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fe99 	bl	8000742 <ILI_Write_Data>

	// NEGATIVE GAMMA CORRECTION
	ILI_Write_Command(0xE1);
 8000a10:	20e1      	movs	r0, #225	; 0xe1
 8000a12:	f7ff fe87 	bl	8000724 <ILI_Write_Command>
	ILI_Write_Data(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fe93 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0E);
 8000a1c:	200e      	movs	r0, #14
 8000a1e:	f7ff fe90 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x14);
 8000a22:	2014      	movs	r0, #20
 8000a24:	f7ff fe8d 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x03);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fe8a 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x11);
 8000a2e:	2011      	movs	r0, #17
 8000a30:	f7ff fe87 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x07);
 8000a34:	2007      	movs	r0, #7
 8000a36:	f7ff fe84 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x31);
 8000a3a:	2031      	movs	r0, #49	; 0x31
 8000a3c:	f7ff fe81 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0xC1);
 8000a40:	20c1      	movs	r0, #193	; 0xc1
 8000a42:	f7ff fe7e 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x48);
 8000a46:	2048      	movs	r0, #72	; 0x48
 8000a48:	f7ff fe7b 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x08);
 8000a4c:	2008      	movs	r0, #8
 8000a4e:	f7ff fe78 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0F);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff fe75 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0C);
 8000a58:	200c      	movs	r0, #12
 8000a5a:	f7ff fe72 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x31);
 8000a5e:	2031      	movs	r0, #49	; 0x31
 8000a60:	f7ff fe6f 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x36);
 8000a64:	2036      	movs	r0, #54	; 0x36
 8000a66:	f7ff fe6c 	bl	8000742 <ILI_Write_Data>
	ILI_Write_Data(0x0F);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f7ff fe69 	bl	8000742 <ILI_Write_Data>

	// EXIT SLEEP
	ILI_Write_Command(0x11);
 8000a70:	2011      	movs	r0, #17
 8000a72:	f7ff fe57 	bl	8000724 <ILI_Write_Command>
	HAL_Delay(120);	// min 120ms
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 fc30 	bl	80012dc <HAL_Delay>

	// TURN ON DISPLAY
	ILI_Write_Command(0x29);
 8000a7c:	2029      	movs	r0, #41	; 0x29
 8000a7e:	f7ff fe51 	bl	8000724 <ILI_Write_Command>

	// STARTING ROTATION & ADDRESS
	ILI_Set_Rotation(ILI_ROTATION);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff fece 	bl	8000824 <ILI_Set_Rotation>
	ILI_Set_Address(0, 0, ILI_SCREEN_WIDTH, ILI_SCREEN_HEIGHT);
 8000a88:	23f0      	movs	r3, #240	; 0xf0
 8000a8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fe65 	bl	8000760 <ILI_Set_Address>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <ILI_SPI_SetDataSize>:
/* DMA Transfer functions -------------------------------- */
/* Switch SPI data size
 * (internal function)
 * Generates preprocessor error if not implemented for your target platform */
static inline void ILI_SPI_SetDataSize(uint32_t datasize)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if (ILI_SPI_HANDLE.Init.DataSize != datasize)
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d022      	beq.n	8000af4 <ILI_SPI_SetDataSize+0x58>
	{
		ILI_SPI_HANDLE.Init.DataSize = datasize;
 8000aae:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60d3      	str	r3, [r2, #12]
		SET_BIT  (ILI_SPI_HANDLE.Instance->CR2, datasize);
#elif defined STM32F4
		/* SPI_CR1 reg, bit 11 DFF, 0: 8-bit / 1: 16-bit
		 * This bit should be written only when SPI is disabled (SPE = ‘0’) for correct operation.
		 * SPI_CR1, bit 6 SPE */
		CLEAR_BIT(ILI_SPI_HANDLE.Instance->CR1, SPI_CR1_SPE);
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ac2:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(ILI_SPI_HANDLE.Instance->CR1, SPI_DATASIZE_16BIT);
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ad2:	601a      	str	r2, [r3, #0]
		SET_BIT(ILI_SPI_HANDLE.Instance->CR1, datasize);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6819      	ldr	r1, [r3, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		SET_BIT(ILI_SPI_HANDLE.Instance->CR1, SPI_CR1_SPE);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <ILI_SPI_SetDataSize+0x64>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000af2:	601a      	str	r2, [r3, #0]
#else
#error "SPI Data Size switching not implemented for target platform."
#endif
	}
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20029800 	.word	0x20029800

08000b04 <ILI_SPI_DMA_SetMemInc>:

/* Enable/disable DMA Memory Address Increment
 * (internal function)
 * Generates preprocessor error if not implemented for your target platform */
static inline void ILI_SPI_DMA_SetMemInc(uint32_t mode)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	if (ILI_SPI_HANDLE.hdmatx->Init.MemInc != mode)
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d017      	beq.n	8000b48 <ILI_SPI_DMA_SetMemInc+0x44>
	{
		ILI_SPI_HANDLE.hdmatx->Init.MemInc = mode;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	611a      	str	r2, [r3, #16]
		/* Platform specific implementation: */
#if defined STM32H7 || defined STM32F7 || defined STM32F4	// same on H7, F7, F4, and probably others
		/* DMA_SxCR reg, bit 10 MINC
		 * 1: increment enabled / 0: disabled (fixed pointer) */
		CLEAR_BIT(((DMA_Stream_TypeDef *)ILI_SPI_HANDLE.hdmatx->Instance)->CR,
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b32:	601a      	str	r2, [r3, #0]
				DMA_MINC_ENABLE);
		SET_BIT(((DMA_Stream_TypeDef *)ILI_SPI_HANDLE.hdmatx->Instance)->CR,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <ILI_SPI_DMA_SetMemInc+0x50>)
 8000b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
				mode);
#else
#error "DMA Memory Increment Mode switching not implemented for target platform."
#endif
	}
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20029800 	.word	0x20029800

08000b58 <ILI_DMA_Transfer>:

/* Start DMA transfer
 * (internal function)
 * DMA module should be configured for half-word (16-bit) operation */
static HAL_StatusTypeDef ILI_DMA_Transfer(uint16_t *Buf, uint32_t MemInc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	if (DMA_Busy)
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <ILI_DMA_Transfer+0x7c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <ILI_DMA_Transfer+0x18>
		return HAL_BUSY;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e02c      	b.n	8000bca <ILI_DMA_Transfer+0x72>

	// Check DMA data size
	// Abort in case of wrong configuration
	if (ILI_SPI_HANDLE.hdmatx->Init.PeriphDataAlignment
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <ILI_DMA_Transfer+0x80>)
 8000b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b7a:	d001      	beq.n	8000b80 <ILI_DMA_Transfer+0x28>
			!= DMA_PDATAALIGN_HALFWORD)
		return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e024      	b.n	8000bca <ILI_DMA_Transfer+0x72>

	DMA_Busy = 1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <ILI_DMA_Transfer+0x7c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ILI_DC_PORT, ILI_DC_PIN, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <ILI_DMA_Transfer+0x84>)
 8000b8c:	f001 f9c2 	bl	8001f14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ILI_CS_PORT, ILI_CS_PIN, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <ILI_DMA_Transfer+0x88>)
 8000b96:	f001 f9bd 	bl	8001f14 <HAL_GPIO_WritePin>

	// Configure SPI & DMA peripherals
	ILI_SPI_SetDataSize(SPI_DATASIZE_16BIT);
 8000b9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b9e:	f7ff ff7d 	bl	8000a9c <ILI_SPI_SetDataSize>
	ILI_SPI_DMA_SetMemInc(MemInc);
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f7ff ffae 	bl	8000b04 <ILI_SPI_DMA_SetMemInc>

	// Size set by ILI_Set_Address()
	uint32_t Size = Block_Width * Block_Height;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <ILI_DMA_Transfer+0x8c>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <ILI_DMA_Transfer+0x90>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	fb03 f302 	mul.w	r3, r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
		SCB_CleanDCache_by_Addr((uint32_t *)Buf, 2);
	}
	#endif

	// Using callback function to start transfer
	DMA_SizeRemaining = Size;
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <ILI_DMA_Transfer+0x94>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6013      	str	r3, [r2, #0]
	DMA_BufRemaining = Buf;
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <ILI_DMA_Transfer+0x98>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
	return ILI_DMA_Callback();
 8000bc4:	f000 f84a 	bl	8000c5c <ILI_DMA_Callback>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002a2 	.word	0x200002a2
 8000bd8:	20029800 	.word	0x20029800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000002 	.word	0x20000002
 8000bec:	20000290 	.word	0x20000290
 8000bf0:	20000294 	.word	0x20000294

08000bf4 <ILI_DMA_Load>:

/* Start DMA transfer */
HAL_StatusTypeDef ILI_DMA_Load(uint16_t *Buf)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	if (DMA_Busy)
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <ILI_DMA_Load+0x2c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <ILI_DMA_Load+0x16>
		return HAL_BUSY;
 8000c06:	2302      	movs	r3, #2
 8000c08:	e005      	b.n	8000c16 <ILI_DMA_Load+0x22>
	return ILI_DMA_Transfer(Buf, DMA_MINC_ENABLE);
 8000c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <ILI_DMA_Transfer>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200002a2 	.word	0x200002a2

08000c24 <ILI_DMA_Fill>:

/* Fill display with solid color */
HAL_StatusTypeDef ILI_DMA_Fill(uint16_t Color)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	if (DMA_Busy)
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <ILI_DMA_Fill+0x30>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <ILI_DMA_Fill+0x18>
		return HAL_BUSY;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e007      	b.n	8000c4c <ILI_DMA_Fill+0x28>
	DMA_BufFill = Color;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <ILI_DMA_Fill+0x34>)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	8013      	strh	r3, [r2, #0]
	return ILI_DMA_Transfer((uint16_t*) &DMA_BufFill, DMA_MINC_DISABLE);
 8000c42:	2100      	movs	r1, #0
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <ILI_DMA_Fill+0x34>)
 8000c46:	f7ff ff87 	bl	8000b58 <ILI_DMA_Transfer>
 8000c4a:	4603      	mov	r3, r0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200002a2 	.word	0x200002a2
 8000c58:	200002a0 	.word	0x200002a0

08000c5c <ILI_DMA_Callback>:

/* Continue/finish DMA transfer
 * To be called from HAL_SPI_TxCpltCallback */
HAL_StatusTypeDef ILI_DMA_Callback(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result = HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]

	if (DMA_SizeRemaining > 0)
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d037      	beq.n	8000cde <ILI_DMA_Callback+0x82>
	{	// Continue transfer
		uint16_t TransferSize;
		uint16_t *TransferBuf = (uint16_t*) DMA_BufRemaining;
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <ILI_DMA_Callback+0xb0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	603b      	str	r3, [r7, #0]

		// Calculate DMA transfer size
		// (DMA module has 16-bit counter)
		if (DMA_SizeRemaining < UINT16_MAX)
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d806      	bhi.n	8000c8e <ILI_DMA_Callback+0x32>
		{
			TransferSize = DMA_SizeRemaining;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	80bb      	strh	r3, [r7, #4]
			DMA_SizeRemaining = 0;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e01e      	b.n	8000ccc <ILI_DMA_Callback+0x70>
		}
		else
		{
			TransferSize = UINT16_MAX - (UINT16_MAX % (Block_Width));
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <ILI_DMA_Callback+0xb4>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c9c:	fb02 f201 	mul.w	r2, r2, r1
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	80bb      	strh	r3, [r7, #4]
			DMA_SizeRemaining -= TransferSize;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <ILI_DMA_Callback+0xac>)
 8000cb2:	6013      	str	r3, [r2, #0]
			if (ILI_SPI_HANDLE.hdmatx->Init.MemInc != DMA_MINC_DISABLE)
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <ILI_DMA_Callback+0xb8>)
 8000cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <ILI_DMA_Callback+0x70>
			{	// Check if DMA_Fill in progress
				DMA_BufRemaining = &DMA_BufRemaining[TransferSize];
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <ILI_DMA_Callback+0xb0>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <ILI_DMA_Callback+0xb0>)
 8000cca:	6013      	str	r3, [r2, #0]
			}
		}

		result = HAL_SPI_Transmit_DMA(&ILI_SPI_HANDLE, (uint8_t*) TransferBuf,
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6839      	ldr	r1, [r7, #0]
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <ILI_DMA_Callback+0xb8>)
 8000cd4:	f001 ff7a 	bl	8002bcc <HAL_SPI_Transmit_DMA>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	e00e      	b.n	8000cfc <ILI_DMA_Callback+0xa0>
				TransferSize);
	}
	else
	{
		// Restore 8-bit data size
		ILI_SPI_SetDataSize(SPI_DATASIZE_8BIT);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fedc 	bl	8000a9c <ILI_SPI_SetDataSize>
		// Restore MemInc
		ILI_SPI_DMA_SetMemInc(DMA_MINC_ENABLE);
 8000ce4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ce8:	f7ff ff0c 	bl	8000b04 <ILI_SPI_DMA_SetMemInc>

		HAL_GPIO_WritePin(ILI_CS_PORT, ILI_CS_PIN, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <ILI_DMA_Callback+0xbc>)
 8000cf2:	f001 f90f 	bl	8001f14 <HAL_GPIO_WritePin>
		DMA_Busy = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <ILI_DMA_Callback+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000290 	.word	0x20000290
 8000d0c:	20000294 	.word	0x20000294
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20029800 	.word	0x20029800
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	200002a2 	.word	0x200002a2

08000d20 <ILI_DMA_Busy>:

/* Returns non-zero value if transfer in progress */
uint8_t ILI_DMA_Busy(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	return DMA_Busy;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <ILI_DMA_Busy+0x14>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200002a2 	.word	0x200002a2

08000d38 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == ILI_SPI_HANDLE.Instance)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_SPI_TxCpltCallback+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d101      	bne.n	8000d50 <HAL_SPI_TxCpltCallback+0x18>
	{
		ILI_DMA_Callback();
 8000d4c:	f7ff ff86 	bl	8000c5c <ILI_DMA_Callback>
	}
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20029800 	.word	0x20029800

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f000 fa79 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f84b 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f7ff fc1f 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6e:	f7ff fbbf 	bl	80004f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d72:	f000 f8cf 	bl	8000f14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	ILI_Init();
 8000d76:	f7ff fd81 	bl	800087c <ILI_Init>
	/* Splash screen */
	ILI_DMA_Fill(BLACK);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff52 	bl	8000c24 <ILI_DMA_Fill>
	while (ILI_DMA_Busy())
 8000d80:	bf00      	nop
 8000d82:	f7ff ffcd 	bl	8000d20 <ILI_DMA_Busy>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1fa      	bne.n	8000d82 <main+0x26>
		;
	/* Draw something */
	uint32_t i;
	for (i = 0; i < (ILI_SCREEN_WIDTH * ILI_SCREEN_HEIGHT); i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	e028      	b.n	8000de4 <main+0x88>
	{
		if (i < ILI_SCREEN_HEIGHT / 4 * ILI_SCREEN_WIDTH)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000d98:	d206      	bcs.n	8000da8 <main+0x4c>
		{
			display_buf[i] = RED;
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <main+0xa0>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000da6:	e01a      	b.n	8000dde <main+0x82>
		}
		else if (i < ILI_SCREEN_HEIGHT / 2 * ILI_SCREEN_WIDTH)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000dae:	d206      	bcs.n	8000dbe <main+0x62>
		{
			display_buf[i] = GREEN;
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <main+0xa0>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000dbc:	e00f      	b.n	8000dde <main+0x82>
		}
		else if (i < ILI_SCREEN_HEIGHT / 4 * 3 * ILI_SCREEN_WIDTH)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000dc4:	d205      	bcs.n	8000dd2 <main+0x76>
		{
			display_buf[i] = BLUE;
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <main+0xa0>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	211f      	movs	r1, #31
 8000dcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000dd0:	e005      	b.n	8000dde <main+0x82>
		}
		else
		{
			display_buf[i] = YELLOW;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <main+0xa0>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8000dda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < (ILI_SCREEN_WIDTH * ILI_SCREEN_HEIGHT); i++)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000dea:	d3d2      	bcc.n	8000d92 <main+0x36>
		}
	}
	/* Load frame buffer */
	ILI_DMA_Load((uint16_t*) display_buf);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <main+0xa0>)
 8000dee:	f7ff ff01 	bl	8000bf4 <ILI_DMA_Load>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000df2:	f7ff fbb7 	bl	8000564 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000df6:	f002 fb2f 	bl	8003458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <main+0x9e>
 8000dfc:	20004000 	.word	0x20004000

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fd52 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SystemClock_Config+0xdc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a24      	ldr	r2, [pc, #144]	; (8000edc <SystemClock_Config+0xdc>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SystemClock_Config+0xdc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e74:	23b4      	movs	r3, #180	; 0xb4
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f8af 	bl	8001fe8 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e90:	f000 f838 	bl	8000f04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e94:	f001 f858 	bl	8001f48 <HAL_PWREx_EnableOverDrive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e9e:	f000 f831 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fb01 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ecc:	f000 f81a 	bl	8000f04 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3750      	adds	r7, #80	; 0x50
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ef2:	f000 f9d3 	bl	800129c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40001000 	.word	0x40001000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <MX_SPI1_Init+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f60:	220a      	movs	r2, #10
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_SPI1_Init+0x64>)
 8000f66:	f001 fc99 	bl	800289c <HAL_SPI_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f70:	f7ff ffc8 	bl	8000f04 <Error_Handler>
  }

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20029800 	.word	0x20029800
 8000f7c:	40013000 	.word	0x40013000

08000f80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <HAL_SPI_MspInit+0xe4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d15b      	bne.n	800105a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fda:	23e0      	movs	r3, #224	; 0xe0
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000ff6:	f000 fde3 	bl	8001bc0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_SPI_MspInit+0xf4>)
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001002:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001006:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800101e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001022:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001040:	f000 fa50 	bl	80014e4 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800104a:	f7ff ff5b 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001052:	649a      	str	r2, [r3, #72]	; 0x48
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013000 	.word	0x40013000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	20029858 	.word	0x20029858
 8001074:	40026458 	.word	0x40026458

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2036      	movs	r0, #54	; 0x36
 80010de:	f000 f9d7 	bl	8001490 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e2:	2036      	movs	r0, #54	; 0x36
 80010e4:	f000 f9f0 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_InitTick+0xa4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_InitTick+0xa4>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_InitTick+0xa4>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001104:	f107 0210 	add.w	r2, r7, #16
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fb92 	bl	8002838 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001114:	f001 fb7c 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 8001118:	4603      	mov	r3, r0
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_InitTick+0xa8>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3b01      	subs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0xac>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_InitTick+0xb0>)
 8001130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_InitTick+0xac>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_InitTick+0xac>)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_InitTick+0xac>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_InitTick+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_InitTick+0xac>)
 800114e:	f001 ff2d 	bl	8002fac <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_InitTick+0xac>)
 800115a:	f001 ff5c 	bl	8003016 <HAL_TIM_Base_Start_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	431bde83 	.word	0x431bde83
 8001174:	200298b8 	.word	0x200298b8
 8001178:	40001000 	.word	0x40001000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM6_DAC_IRQHandler+0x10>)
 80011b6:	f001 ff52 	bl	800305e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200298b8 	.word	0x200298b8

080011c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <DMA2_Stream3_IRQHandler+0x10>)
 80011ca:	f000 fa91 	bl	80016f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20029858 	.word	0x20029858

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <SystemInit+0x28>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <SystemInit+0x28>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SystemInit+0x28>)
 80011ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f2:	609a      	str	r2, [r3, #8]
#endif
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800120a:	e003      	b.n	8001214 <LoopCopyDataInit>

0800120c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800120e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001212:	3104      	adds	r1, #4

08001214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800121a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800121c:	d3f6      	bcc.n	800120c <CopyDataInit>
  ldr  r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001220:	e002      	b.n	8001228 <LoopFillZerobss>

08001222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001224:	f842 3b04 	str.w	r3, [r2], #4

08001228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800122c:	d3f9      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800122e:	f7ff ffd3 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f003 fb1d 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff fd91 	bl	8000d5c <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001240:	08004940 	.word	0x08004940
  ldr  r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001248:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800124c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001250:	200298fc 	.word	0x200298fc

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f8fa 	bl	800147a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff1e 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fef4 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	200298f8 	.word	0x200298f8

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200298f8 	.word	0x200298f8

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_Delay+0x40>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000000c 	.word	0x2000000c

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	; (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff4c 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a2:	f7ff ff61 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	6978      	ldr	r0, [r7, #20]
 80014ae:	f7ff ffb1 	bl	8001414 <NVIC_EncodePriority>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff80 	bl	80013c0 <__NVIC_SetPriority>
}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff54 	bl	8001384 <__NVIC_EnableIRQ>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff fee8 	bl	80012c4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e099      	b.n	8001634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001520:	e00f      	b.n	8001542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001522:	f7ff fecf 	bl	80012c4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b05      	cmp	r3, #5
 800152e:	d908      	bls.n	8001542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e078      	b.n	8001634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e8      	bne.n	8001522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <HAL_DMA_Init+0x158>)
 800155c:	4013      	ands	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4313      	orrs	r3, r2
 8001592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	2b04      	cmp	r3, #4
 800159a:	d107      	bne.n	80015ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4313      	orrs	r3, r2
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f023 0307 	bic.w	r3, r3, #7
 80015c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d117      	bne.n	8001606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00e      	beq.n	8001606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fa6f 	bl	8001acc <DMA_CheckFifoParam>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001602:	2301      	movs	r3, #1
 8001604:	e016      	b.n	8001634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fa26 	bl	8001a60 <DMA_CalcBaseAndBitshift>
 8001614:	4603      	mov	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	223f      	movs	r2, #63	; 0x3f
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	f010803f 	.word	0xf010803f

08001640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_DMA_Start_IT+0x26>
 8001662:	2302      	movs	r3, #2
 8001664:	e040      	b.n	80016e8 <HAL_DMA_Start_IT+0xa8>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d12f      	bne.n	80016da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f9b8 	bl	8001a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	223f      	movs	r2, #63	; 0x3f
 800169a:	409a      	lsls	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0216 	orr.w	r2, r2, #22
 80016ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0208 	orr.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016fc:	4b92      	ldr	r3, [pc, #584]	; (8001948 <HAL_DMA_IRQHandler+0x258>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a92      	ldr	r2, [pc, #584]	; (800194c <HAL_DMA_IRQHandler+0x25c>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0a9b      	lsrs	r3, r3, #10
 8001708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	2208      	movs	r2, #8
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01a      	beq.n	800175c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0204 	bic.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2208      	movs	r2, #8
 800174a:	409a      	lsls	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	2201      	movs	r2, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d012      	beq.n	8001792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2201      	movs	r2, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2204      	movs	r2, #4
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d012      	beq.n	80017c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00b      	beq.n	80017c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2204      	movs	r2, #4
 80017b6:	409a      	lsls	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f043 0204 	orr.w	r2, r3, #4
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	2210      	movs	r2, #16
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d043      	beq.n	8001860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d03c      	beq.n	8001860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2210      	movs	r2, #16
 80017ec:	409a      	lsls	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d018      	beq.n	8001832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d024      	beq.n	8001860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
 800181e:	e01f      	b.n	8001860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01b      	beq.n	8001860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e016      	b.n	8001860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0208 	bic.w	r2, r2, #8
 800184e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2220      	movs	r2, #32
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4013      	ands	r3, r2
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 808e 	beq.w	800198e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8086 	beq.w	800198e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2220      	movs	r2, #32
 8001888:	409a      	lsls	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b05      	cmp	r3, #5
 8001898:	d136      	bne.n	8001908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0216 	bic.w	r2, r2, #22
 80018a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <HAL_DMA_IRQHandler+0x1da>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0208 	bic.w	r2, r2, #8
 80018d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	223f      	movs	r2, #63	; 0x3f
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d07d      	beq.n	80019fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
        }
        return;
 8001906:	e078      	b.n	80019fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01c      	beq.n	8001950 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d108      	bne.n	8001936 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	2b00      	cmp	r3, #0
 800192a:	d030      	beq.n	800198e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e02b      	b.n	800198e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d027      	beq.n	800198e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
 8001946:	e022      	b.n	800198e <HAL_DMA_IRQHandler+0x29e>
 8001948:	20000004 	.word	0x20000004
 800194c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0210 	bic.w	r2, r2, #16
 800196c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	2b00      	cmp	r3, #0
 8001994:	d032      	beq.n	80019fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d022      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2205      	movs	r2, #5
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d307      	bcc.n	80019d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f2      	bne.n	80019ba <HAL_DMA_IRQHandler+0x2ca>
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
 80019f8:	e000      	b.n	80019fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80019fa:	bf00      	nop
    }
  }
}
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop

08001a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b40      	cmp	r3, #64	; 0x40
 8001a30:	d108      	bne.n	8001a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a42:	e007      	b.n	8001a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3b10      	subs	r3, #16
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7a:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d909      	bls.n	8001aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a96:	f023 0303 	bic.w	r3, r3, #3
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa0:	e007      	b.n	8001ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	aaaaaaab 	.word	0xaaaaaaab
 8001ac8:	08004928 	.word	0x08004928

08001acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11f      	bne.n	8001b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d855      	bhi.n	8001b98 <DMA_CheckFifoParam+0xcc>
 8001aec:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <DMA_CheckFifoParam+0x28>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b17 	.word	0x08001b17
 8001afc:	08001b05 	.word	0x08001b05
 8001b00:	08001b99 	.word	0x08001b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d045      	beq.n	8001b9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b14:	e042      	b.n	8001b9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b1e:	d13f      	bne.n	8001ba0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b24:	e03c      	b.n	8001ba0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2e:	d121      	bne.n	8001b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d836      	bhi.n	8001ba4 <DMA_CheckFifoParam+0xd8>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <DMA_CheckFifoParam+0x70>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001b4d 	.word	0x08001b4d
 8001b40:	08001b53 	.word	0x08001b53
 8001b44:	08001b4d 	.word	0x08001b4d
 8001b48:	08001b65 	.word	0x08001b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b50:	e02f      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d024      	beq.n	8001ba8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b62:	e021      	b.n	8001ba8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b6c:	d11e      	bne.n	8001bac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b72:	e01b      	b.n	8001bac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d902      	bls.n	8001b80 <DMA_CheckFifoParam+0xb4>
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d003      	beq.n	8001b86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b7e:	e018      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      break;
 8001b84:	e015      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      break;
 8001b96:	e00b      	b.n	8001bb0 <DMA_CheckFifoParam+0xe4>
      break;
 8001b98:	bf00      	nop
 8001b9a:	e00a      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001b9c:	bf00      	nop
 8001b9e:	e008      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba0:	bf00      	nop
 8001ba2:	e006      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba4:	bf00      	nop
 8001ba6:	e004      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba8:	bf00      	nop
 8001baa:	e002      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001bac:	bf00      	nop
 8001bae:	e000      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bb0:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e177      	b.n	8001ecc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8166 	bne.w	8001ec6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d00b      	beq.n	8001c1a <HAL_GPIO_Init+0x5a>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c0e:	2b11      	cmp	r3, #17
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0xfc>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b12      	cmp	r3, #18
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80c0 	beq.w	8001ec6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_GPIO_Init+0x320>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <HAL_GPIO_Init+0x320>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_GPIO_Init+0x320>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d62:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <HAL_GPIO_Init+0x328>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d037      	beq.n	8001dfe <HAL_GPIO_Init+0x23e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_GPIO_Init+0x32c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_GPIO_Init+0x23a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d02b      	beq.n	8001df6 <HAL_GPIO_Init+0x236>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a54      	ldr	r2, [pc, #336]	; (8001ef4 <HAL_GPIO_Init+0x334>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d025      	beq.n	8001df2 <HAL_GPIO_Init+0x232>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a53      	ldr	r2, [pc, #332]	; (8001ef8 <HAL_GPIO_Init+0x338>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01f      	beq.n	8001dee <HAL_GPIO_Init+0x22e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_GPIO_Init+0x33c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d019      	beq.n	8001dea <HAL_GPIO_Init+0x22a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x340>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_GPIO_Init+0x344>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00d      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_GPIO_Init+0x348>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_GPIO_Init+0x34c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_GPIO_Init+0x21a>
 8001dd6:	2309      	movs	r3, #9
 8001dd8:	e012      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dda:	230a      	movs	r3, #10
 8001ddc:	e010      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dde:	2308      	movs	r3, #8
 8001de0:	e00e      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00c      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001de6:	2306      	movs	r3, #6
 8001de8:	e00a      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x240>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e10:	4934      	ldr	r1, [pc, #208]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e42:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <HAL_GPIO_Init+0x350>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	f67f ae84 	bls.w	8001bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3724      	adds	r7, #36	; 0x24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40022400 	.word	0x40022400
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_PWREx_EnableOverDrive+0x94>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f74:	f7ff f9a6 	bl	80012c4 <HAL_GetTick>
 8001f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f7a:	e009      	b.n	8001f90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f7c:	f7ff f9a2 	bl	80012c4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f8a:	d901      	bls.n	8001f90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e01f      	b.n	8001fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa4:	f7ff f98e 	bl	80012c4 <HAL_GetTick>
 8001fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001faa:	e009      	b.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fac:	f7ff f98a 	bl	80012c4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fba:	d901      	bls.n	8001fc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e007      	b.n	8001fd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fcc:	d1ee      	bne.n	8001fac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	420e0040 	.word	0x420e0040
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	420e0044 	.word	0x420e0044

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e25b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d075      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	4ba3      	ldr	r3, [pc, #652]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4ba0      	ldr	r3, [pc, #640]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201a:	2b08      	cmp	r3, #8
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b9d      	ldr	r3, [pc, #628]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b99      	ldr	r3, [pc, #612]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x108>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e236      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x74>
 800204e:	4b91      	ldr	r3, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a90      	ldr	r2, [pc, #576]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a87      	ldr	r2, [pc, #540]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 8002080:	4b84      	ldr	r3, [pc, #528]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a83      	ldr	r2, [pc, #524]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a80      	ldr	r2, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff f910 	bl	80012c4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f90c 	bl	80012c4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1fb      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f8fc 	bl	80012c4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f8f8 	bl	80012c4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1e7      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b6c      	ldr	r3, [pc, #432]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0xe8>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	4b65      	ldr	r3, [pc, #404]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1bb      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4952      	ldr	r1, [pc, #328]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x2b0>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f8b1 	bl	80012c4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7ff f8ad 	bl	80012c4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e19c      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4940      	ldr	r1, [pc, #256]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_OscConfig+0x2b0>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff f890 	bl	80012c4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a8:	f7ff f88c 	bl	80012c4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e17b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d030      	beq.n	8002234 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_RCC_OscConfig+0x2b4>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7ff f870 	bl	80012c4 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f86c 	bl	80012c4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e15b      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x200>
 8002206:	e015      	b.n	8002234 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x2b4>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff f859 	bl	80012c4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002216:	f7ff f855 	bl	80012c4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e144      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a0 	beq.w	8002382 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_RCC_OscConfig+0x2b8>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7ff f81b 	bl	80012c4 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e011      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ce>
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	42470000 	.word	0x42470000
 800229c:	42470e80 	.word	0x42470e80
 80022a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7ff f80e 	bl	80012c4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e0fd      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4d4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x32a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022e0:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a76      	ldr	r2, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x32a>
 80022fa:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a6d      	ldr	r2, [pc, #436]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe ffd3 	bl	80012c4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7fe ffcf 	bl	80012c4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0bc      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x33a>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe ffbd 	bl	80012c4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe ffb9 	bl	80012c4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0a6      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8092 	beq.w	80024b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d05c      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d141      	bne.n	8002424 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe ff8d 	bl	80012c4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe ff89 	bl	80012c4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e078      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	061b      	lsls	r3, r3, #24
 80023f0:	4933      	ldr	r1, [pc, #204]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff62 	bl	80012c4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe ff5e 	bl	80012c4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e04d      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x41c>
 8002422:	e045      	b.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x4dc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe ff4b 	bl	80012c4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe ff47 	bl	80012c4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e036      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x44a>
 8002450:	e02e      	b.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e029      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	429a      	cmp	r2, r3
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d115      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40007000 	.word	0x40007000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	42470060 	.word	0x42470060

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cc      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d90c      	bls.n	8002504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d044      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e067      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fe84 	bl	80012c4 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fe80 	bl	80012c4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20c      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f821 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002652:	4601      	mov	r1, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	fa21 f303 	lsr.w	r3, r1, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fd2a 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00
 8002684:	40023800 	.word	0x40023800
 8002688:	08004910 	.word	0x08004910
 800268c:	20000004 	.word	0x20000004
 8002690:	20000008 	.word	0x20000008

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026aa:	4b50      	ldr	r3, [pc, #320]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d007      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x32>
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d008      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x38>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 808d 	bne.w	80027da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026c2:	60bb      	str	r3, [r7, #8]
       break;
 80026c4:	e08c      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c6:	4b4b      	ldr	r3, [pc, #300]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026c8:	60bb      	str	r3, [r7, #8]
      break;
 80026ca:	e089      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026cc:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d023      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	f04f 0400 	mov.w	r4, #0
 80026ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	ea03 0501 	and.w	r5, r3, r1
 80026f8:	ea04 0602 	and.w	r6, r4, r2
 80026fc:	4a3d      	ldr	r2, [pc, #244]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80026fe:	fb02 f106 	mul.w	r1, r2, r6
 8002702:	2200      	movs	r2, #0
 8002704:	fb02 f205 	mul.w	r2, r2, r5
 8002708:	440a      	add	r2, r1
 800270a:	493a      	ldr	r1, [pc, #232]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800270c:	fba5 0101 	umull	r0, r1, r5, r1
 8002710:	1853      	adds	r3, r2, r1
 8002712:	4619      	mov	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f04f 0400 	mov.w	r4, #0
 800271a:	461a      	mov	r2, r3
 800271c:	4623      	mov	r3, r4
 800271e:	f7fd fd67 	bl	80001f0 <__aeabi_uldivmod>
 8002722:	4603      	mov	r3, r0
 8002724:	460c      	mov	r4, r1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e049      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	f04f 0400 	mov.w	r4, #0
 8002734:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	ea03 0501 	and.w	r5, r3, r1
 8002740:	ea04 0602 	and.w	r6, r4, r2
 8002744:	4629      	mov	r1, r5
 8002746:	4632      	mov	r2, r6
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f04f 0400 	mov.w	r4, #0
 8002750:	0154      	lsls	r4, r2, #5
 8002752:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002756:	014b      	lsls	r3, r1, #5
 8002758:	4619      	mov	r1, r3
 800275a:	4622      	mov	r2, r4
 800275c:	1b49      	subs	r1, r1, r5
 800275e:	eb62 0206 	sbc.w	r2, r2, r6
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f04f 0400 	mov.w	r4, #0
 800276a:	0194      	lsls	r4, r2, #6
 800276c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002770:	018b      	lsls	r3, r1, #6
 8002772:	1a5b      	subs	r3, r3, r1
 8002774:	eb64 0402 	sbc.w	r4, r4, r2
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	00e2      	lsls	r2, r4, #3
 8002782:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002786:	00d9      	lsls	r1, r3, #3
 8002788:	460b      	mov	r3, r1
 800278a:	4614      	mov	r4, r2
 800278c:	195b      	adds	r3, r3, r5
 800278e:	eb44 0406 	adc.w	r4, r4, r6
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	02a2      	lsls	r2, r4, #10
 800279c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027a0:	0299      	lsls	r1, r3, #10
 80027a2:	460b      	mov	r3, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	4621      	mov	r1, r4
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	f7fd fd1c 	bl	80001f0 <__aeabi_uldivmod>
 80027b8:	4603      	mov	r3, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_GetSysClockFreq+0x158>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	3301      	adds	r3, #1
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	60bb      	str	r3, [r7, #8]
      break;
 80027d8:	e002      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027dc:	60bb      	str	r3, [r7, #8]
      break;
 80027de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e0:	68bb      	ldr	r3, [r7, #8]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	00f42400 	.word	0x00f42400
 80027f4:	017d7840 	.word	0x017d7840

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_RCC_GetHCLKFreq+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff0 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002818:	4601      	mov	r1, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	08004920 	.word	0x08004920

08002838 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	220f      	movs	r2, #15
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCC_GetClockConfig+0x60>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e056      	b.n	800295c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fe fb59 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	ea42 0103 	orr.w	r1, r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	f003 0104 	and.w	r1, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_SPI_Transmit+0x22>
 8002982:	2302      	movs	r3, #2
 8002984:	e11e      	b.n	8002bc4 <HAL_SPI_Transmit+0x260>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800298e:	f7fe fc99 	bl	80012c4 <HAL_GetTick>
 8002992:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029a8:	e103      	b.n	8002bb2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0x52>
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ba:	e0fa      	b.n	8002bb2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2203      	movs	r2, #3
 80029c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a02:	d107      	bne.n	8002a14 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b40      	cmp	r3, #64	; 0x40
 8002a20:	d007      	beq.n	8002a32 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3a:	d14b      	bne.n	8002ad4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_SPI_Transmit+0xe6>
 8002a44:	8afb      	ldrh	r3, [r7, #22]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d13e      	bne.n	8002ac8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a6e:	e02b      	b.n	8002ac8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d112      	bne.n	8002aa4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aa2:	e011      	b.n	8002ac8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa4:	f7fe fc0e 	bl	80012c4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d803      	bhi.n	8002abc <HAL_SPI_Transmit+0x158>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x15e>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ac6:	e074      	b.n	8002bb2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ce      	bne.n	8002a70 <HAL_SPI_Transmit+0x10c>
 8002ad2:	e04c      	b.n	8002b6e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0x17e>
 8002adc:	8afb      	ldrh	r3, [r7, #22]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d140      	bne.n	8002b64 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b08:	e02c      	b.n	8002b64 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d113      	bne.n	8002b40 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b3e:	e011      	b.n	8002b64 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b40:	f7fe fbc0 	bl	80012c4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d803      	bhi.n	8002b58 <HAL_SPI_Transmit+0x1f4>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Transmit+0x1fa>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b62:	e026      	b.n	8002bb2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cd      	bne.n	8002b0a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f9d8 	bl	8002f28 <SPI_EndRxTxTransaction>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e000      	b.n	8002bb2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002bb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_SPI_Transmit_DMA+0x20>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e093      	b.n	8002d14 <HAL_SPI_Transmit_DMA+0x148>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c04:	e081      	b.n	8002d0a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Transmit_DMA+0x46>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c16:	e078      	b.n	8002d0a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5e:	d107      	bne.n	8002c70 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_SPI_Transmit_DMA+0x150>)
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_SPI_Transmit_DMA+0x154>)
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_SPI_Transmit_DMA+0x158>)
 8002c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4619      	mov	r1, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ca8:	f7fe fcca 	bl	8001640 <HAL_DMA_Start_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002cca:	e01e      	b.n	8002d0a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d007      	beq.n	8002cea <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0202 	orr.w	r2, r2, #2
 8002d08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	08002df9 	.word	0x08002df9
 8002d20:	08002d51 	.word	0x08002d51
 8002d24:	08002e15 	.word	0x08002e15

08002d28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d5e:	f7fe fab1 	bl	80012c4 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d72:	d03b      	beq.n	8002dec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0220 	bic.w	r2, r2, #32
 8002d82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0202 	bic.w	r2, r2, #2
 8002d92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	2164      	movs	r1, #100	; 0x64
 8002d98:	6978      	ldr	r0, [r7, #20]
 8002d9a:	f000 f8c5 	bl	8002f28 <SPI_EndRxTxTransaction>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f7ff ffa9 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002dea:	e002      	b.n	8002df2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7fd ffa3 	bl	8000d38 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ff8e 	bl	8002d28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0203 	bic.w	r2, r2, #3
 8002e30:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ff78 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e64:	e04c      	b.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d048      	beq.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e6e:	f7fe fa29 	bl	80012c4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d902      	bls.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d13d      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9c:	d111      	bne.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea6:	d004      	beq.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d107      	bne.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d10f      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e00f      	b.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d1a3      	bne.n	8002e66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <SPI_EndRxTxTransaction+0x7c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <SPI_EndRxTxTransaction+0x80>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0d5b      	lsrs	r3, r3, #21
 8002f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f52:	d112      	bne.n	8002f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff78 	bl	8002e54 <SPI_WaitFlagStateUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e00f      	b.n	8002f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d0f2      	beq.n	8002f7a <SPI_EndRxTxTransaction+0x52>
 8002f94:	e000      	b.n	8002f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f96:	bf00      	nop
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	165e9f81 	.word	0x165e9f81

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e01d      	b.n	8002ffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f815 	bl	8003002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f968 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d007      	beq.n	8003050 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d122      	bne.n	80030ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d11b      	bne.n	80030ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f06f 0202 	mvn.w	r2, #2
 800308a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8ee 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80030a6:	e005      	b.n	80030b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8e0 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8f1 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d122      	bne.n	800310e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d11b      	bne.n	800310e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0204 	mvn.w	r2, #4
 80030de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f8c4 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80030fa:	e005      	b.n	8003108 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f8b6 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8c7 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d122      	bne.n	8003162 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d11b      	bne.n	8003162 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0208 	mvn.w	r2, #8
 8003132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2204      	movs	r2, #4
 8003138:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f89a 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 800314e:	e005      	b.n	800315c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f88c 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f89d 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d122      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b10      	cmp	r3, #16
 800317c:	d11b      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0210 	mvn.w	r2, #16
 8003186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2208      	movs	r2, #8
 800318c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f870 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 80031a2:	e005      	b.n	80031b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f862 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f873 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0201 	mvn.w	r2, #1
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fe7f 	bl	8000ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b80      	cmp	r3, #128	; 0x80
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f903 	bl	8003414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f838 	bl	80032aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d10e      	bne.n	8003266 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	d107      	bne.n	8003266 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0220 	mvn.w	r2, #32
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8cd 	bl	8003400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d027      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d023      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <TIM_Base_SetConfig+0x128>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <TIM_Base_SetConfig+0x12c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <TIM_Base_SetConfig+0x130>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0x134>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <TIM_Base_SetConfig+0x138>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <TIM_Base_SetConfig+0x13c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	40001800 	.word	0x40001800
 80033f8:	40001c00 	.word	0x40001c00
 80033fc:	40002000 	.word	0x40002000

08003400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800343a:	2b84      	cmp	r3, #132	; 0x84
 800343c:	d005      	beq.n	800344a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800343e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	3303      	adds	r3, #3
 8003448:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800345c:	f000 fada 	bl	8003a14 <vTaskStartScheduler>
  
  return osOK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	bd80      	pop	{r7, pc}

08003466 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003468:	b089      	sub	sp, #36	; 0x24
 800346a:	af04      	add	r7, sp, #16
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <osThreadCreate+0x54>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01c      	beq.n	80034ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685c      	ldr	r4, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681d      	ldr	r5, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691e      	ldr	r6, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ffc8 	bl	8003428 <makeFreeRtosPriority>
 8003498:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a2:	9202      	str	r2, [sp, #8]
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	9100      	str	r1, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4632      	mov	r2, r6
 80034ac:	4629      	mov	r1, r5
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 f8ed 	bl	800368e <xTaskCreateStatic>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e01c      	b.n	80034f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685c      	ldr	r4, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c6:	b29e      	uxth	r6, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ffaa 	bl	8003428 <makeFreeRtosPriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	4632      	mov	r2, r6
 80034e2:	4629      	mov	r1, r5
 80034e4:	4620      	mov	r0, r4
 80034e6:	f000 f92c 	bl	8003742 <xTaskCreate>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <osDelay+0x16>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	e000      	b.n	8003516 <osDelay+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fa48 	bl	80039ac <vTaskDelay>
  
  return osOK;
 800351c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f103 0208 	add.w	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f04f 32ff 	mov.w	r2, #4294967295
 800353e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0208 	add.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0208 	add.w	r2, r3, #8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d103      	bne.n	80035e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e00c      	b.n	8003602 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3308      	adds	r3, #8
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e002      	b.n	80035f6 <vListInsert+0x2e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d2f6      	bcs.n	80035f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d103      	bne.n	800366e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800368e:	b580      	push	{r7, lr}
 8003690:	b08e      	sub	sp, #56	; 0x38
 8003692:	af04      	add	r7, sp, #16
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	e7fe      	b.n	80036b4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <xTaskCreateStatic+0x42>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e7fe      	b.n	80036ce <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036d0:	2354      	movs	r3, #84	; 0x54
 80036d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b54      	cmp	r3, #84	; 0x54
 80036d8:	d009      	beq.n	80036ee <xTaskCreateStatic+0x60>
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e7fe      	b.n	80036ec <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01e      	beq.n	8003734 <xTaskCreateStatic+0xa6>
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003704:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800370e:	2300      	movs	r3, #0
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f850 	bl	80037cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372e:	f000 f8d3 	bl	80038d8 <prvAddNewTaskToReadyList>
 8003732:	e001      	b.n	8003738 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003738:	697b      	ldr	r3, [r7, #20]
	}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08c      	sub	sp, #48	; 0x30
 8003746:	af04      	add	r7, sp, #16
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 feb4 	bl	80044c4 <pvPortMalloc>
 800375c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003764:	2054      	movs	r0, #84	; 0x54
 8003766:	f000 fead 	bl	80044c4 <pvPortMalloc>
 800376a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
 8003778:	e005      	b.n	8003786 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f000 ff64 	bl	8004648 <vPortFree>
 8003780:	e001      	b.n	8003786 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	2300      	movs	r3, #0
 8003798:	9303      	str	r3, [sp, #12]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	9302      	str	r3, [sp, #8]
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f80e 	bl	80037cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037b0:	69f8      	ldr	r0, [r7, #28]
 80037b2:	f000 f891 	bl	80038d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e002      	b.n	80037c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037c2:	69bb      	ldr	r3, [r7, #24]
	}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037e4:	3b01      	subs	r3, #1
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <prvInitialiseNewTask+0x46>
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e7fe      	b.n	8003810 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01f      	beq.n	8003858 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e012      	b.n	8003844 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	7819      	ldrb	r1, [r3, #0]
 8003826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	3334      	adds	r3, #52	; 0x34
 800382e:	460a      	mov	r2, r1
 8003830:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3301      	adds	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d9e9      	bls.n	800381e <prvInitialiseNewTask+0x52>
 800384a:	e000      	b.n	800384e <prvInitialiseNewTask+0x82>
			{
				break;
 800384c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003856:	e003      	b.n	8003860 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2b06      	cmp	r3, #6
 8003864:	d901      	bls.n	800386a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003866:	2306      	movs	r3, #6
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fe70 	bl	8003566 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	3318      	adds	r3, #24
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe6b 	bl	8003566 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	f1c3 0207 	rsb	r2, r3, #7
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2200      	movs	r2, #0
 80038aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	69b8      	ldr	r0, [r7, #24]
 80038ba:	f000 fbfd 	bl	80040b8 <pxPortInitialiseStack>
 80038be:	4602      	mov	r2, r0
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038e0:	f000 fd14 	bl	800430c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038e4:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <prvAddNewTaskToReadyList+0xb8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	4a29      	ldr	r2, [pc, #164]	; (8003990 <prvAddNewTaskToReadyList+0xb8>)
 80038ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <prvAddNewTaskToReadyList+0xbc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038f6:	4a27      	ldr	r2, [pc, #156]	; (8003994 <prvAddNewTaskToReadyList+0xbc>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <prvAddNewTaskToReadyList+0xb8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d110      	bne.n	8003926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003904:	f000 fab8 	bl	8003e78 <prvInitialiseTaskLists>
 8003908:	e00d      	b.n	8003926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <prvAddNewTaskToReadyList+0xc0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <prvAddNewTaskToReadyList+0xbc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	429a      	cmp	r2, r3
 800391e:	d802      	bhi.n	8003926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003920:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <prvAddNewTaskToReadyList+0xbc>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <prvAddNewTaskToReadyList+0xc4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <prvAddNewTaskToReadyList+0xc4>)
 800392e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <prvAddNewTaskToReadyList+0xc8>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <prvAddNewTaskToReadyList+0xcc>)
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7ff fe11 	bl	8003580 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800395e:	f000 fd03 	bl	8004368 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <prvAddNewTaskToReadyList+0xc0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <prvAddNewTaskToReadyList+0xbc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	429a      	cmp	r2, r3
 8003976:	d207      	bcs.n	8003988 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <prvAddNewTaskToReadyList+0xd0>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200003a4 	.word	0x200003a4
 8003994:	200002a4 	.word	0x200002a4
 8003998:	200003b0 	.word	0x200003b0
 800399c:	200003c0 	.word	0x200003c0
 80039a0:	200003ac 	.word	0x200003ac
 80039a4:	200002a8 	.word	0x200002a8
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039be:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <vTaskDelay+0x60>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <vTaskDelay+0x2e>
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	e7fe      	b.n	80039d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80039da:	f000 f879 	bl	8003ad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039de:	2100      	movs	r1, #0
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb03 	bl	8003fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039e6:	f000 f881 	bl	8003aec <xTaskResumeAll>
 80039ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <vTaskDelay+0x64>)
 80039f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200003cc 	.word	0x200003cc
 8003a10:	e000ed04 	.word	0xe000ed04

08003a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a22:	463a      	mov	r2, r7
 8003a24:	1d39      	adds	r1, r7, #4
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fd80 	bl	8000530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	9202      	str	r2, [sp, #8]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	460a      	mov	r2, r1
 8003a42:	491d      	ldr	r1, [pc, #116]	; (8003ab8 <vTaskStartScheduler+0xa4>)
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <vTaskStartScheduler+0xa8>)
 8003a46:	f7ff fe22 	bl	800368e <xTaskCreateStatic>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <vTaskStartScheduler+0xac>)
 8003a4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <vTaskStartScheduler+0xac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e001      	b.n	8003a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d115      	bne.n	8003a94 <vTaskStartScheduler+0x80>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <vTaskStartScheduler+0xb0>)
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <vTaskStartScheduler+0xb4>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <vTaskStartScheduler+0xb8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a8e:	f000 fb9f 	bl	80041d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a92:	e00d      	b.n	8003ab0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d109      	bne.n	8003ab0 <vTaskStartScheduler+0x9c>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e7fe      	b.n	8003aae <vTaskStartScheduler+0x9a>
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08004908 	.word	0x08004908
 8003abc:	08003e49 	.word	0x08003e49
 8003ac0:	200003c8 	.word	0x200003c8
 8003ac4:	200003c4 	.word	0x200003c4
 8003ac8:	200003b0 	.word	0x200003b0
 8003acc:	200003a8 	.word	0x200003a8

08003ad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <vTaskSuspendAll+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <vTaskSuspendAll+0x18>)
 8003adc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	200003cc 	.word	0x200003cc

08003aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <xTaskResumeAll+0x114>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <xTaskResumeAll+0x2a>
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	e7fe      	b.n	8003b14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b16:	f000 fbf9 	bl	800430c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <xTaskResumeAll+0x114>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	4a37      	ldr	r2, [pc, #220]	; (8003c00 <xTaskResumeAll+0x114>)
 8003b22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <xTaskResumeAll+0x114>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d161      	bne.n	8003bf0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <xTaskResumeAll+0x118>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05d      	beq.n	8003bf0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b34:	e02e      	b.n	8003b94 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <xTaskResumeAll+0x11c>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3318      	adds	r3, #24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fd79 	bl	800363a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fd74 	bl	800363a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <xTaskResumeAll+0x120>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <xTaskResumeAll+0x120>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <xTaskResumeAll+0x124>)
 8003b72:	441a      	add	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7ff fd00 	bl	8003580 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <xTaskResumeAll+0x128>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <xTaskResumeAll+0x12c>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <xTaskResumeAll+0x11c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cc      	bne.n	8003b36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ba2:	f000 fa03 	bl	8003fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <xTaskResumeAll+0x130>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bb2:	f000 f837 	bl	8003c24 <xTaskIncrementTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <xTaskResumeAll+0x12c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f1      	bne.n	8003bb2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <xTaskResumeAll+0x130>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <xTaskResumeAll+0x12c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <xTaskResumeAll+0x134>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bf0:	f000 fbba 	bl	8004368 <vPortExitCritical>

	return xAlreadyYielded;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200003cc 	.word	0x200003cc
 8003c04:	200003a4 	.word	0x200003a4
 8003c08:	20000364 	.word	0x20000364
 8003c0c:	200003ac 	.word	0x200003ac
 8003c10:	200002a8 	.word	0x200002a8
 8003c14:	200002a4 	.word	0x200002a4
 8003c18:	200003b8 	.word	0x200003b8
 8003c1c:	200003b4 	.word	0x200003b4
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	; (8003d68 <xTaskIncrementTick+0x144>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8087 	bne.w	8003d46 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c38:	4b4c      	ldr	r3, [pc, #304]	; (8003d6c <xTaskIncrementTick+0x148>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c40:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <xTaskIncrementTick+0x148>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d11f      	bne.n	8003c8c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c4c:	4b48      	ldr	r3, [pc, #288]	; (8003d70 <xTaskIncrementTick+0x14c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <xTaskIncrementTick+0x46>
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	e7fe      	b.n	8003c68 <xTaskIncrementTick+0x44>
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <xTaskIncrementTick+0x14c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <xTaskIncrementTick+0x150>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3e      	ldr	r2, [pc, #248]	; (8003d70 <xTaskIncrementTick+0x14c>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4a3e      	ldr	r2, [pc, #248]	; (8003d74 <xTaskIncrementTick+0x150>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <xTaskIncrementTick+0x154>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <xTaskIncrementTick+0x154>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	f000 f990 	bl	8003fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <xTaskIncrementTick+0x158>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d348      	bcc.n	8003d28 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <xTaskIncrementTick+0x14c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <xTaskIncrementTick+0x158>)
 8003ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca6:	601a      	str	r2, [r3, #0]
					break;
 8003ca8:	e03e      	b.n	8003d28 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <xTaskIncrementTick+0x14c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d203      	bcs.n	8003cca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cc2:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <xTaskIncrementTick+0x158>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cc8:	e02e      	b.n	8003d28 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fcb3 	bl	800363a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3318      	adds	r3, #24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fcaa 	bl	800363a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <xTaskIncrementTick+0x15c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <xTaskIncrementTick+0x15c>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <xTaskIncrementTick+0x160>)
 8003d06:	441a      	add	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7ff fc36 	bl	8003580 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <xTaskIncrementTick+0x164>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d3b9      	bcc.n	8003c96 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003d22:	2301      	movs	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	e7b6      	b.n	8003c96 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d28:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <xTaskIncrementTick+0x164>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4915      	ldr	r1, [pc, #84]	; (8003d84 <xTaskIncrementTick+0x160>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d907      	bls.n	8003d50 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e004      	b.n	8003d50 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <xTaskIncrementTick+0x168>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <xTaskIncrementTick+0x168>)
 8003d4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <xTaskIncrementTick+0x16c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d5c:	697b      	ldr	r3, [r7, #20]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200003cc 	.word	0x200003cc
 8003d6c:	200003a8 	.word	0x200003a8
 8003d70:	2000035c 	.word	0x2000035c
 8003d74:	20000360 	.word	0x20000360
 8003d78:	200003bc 	.word	0x200003bc
 8003d7c:	200003c4 	.word	0x200003c4
 8003d80:	200003ac 	.word	0x200003ac
 8003d84:	200002a8 	.word	0x200002a8
 8003d88:	200002a4 	.word	0x200002a4
 8003d8c:	200003b4 	.word	0x200003b4
 8003d90:	200003b8 	.word	0x200003b8

08003d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <vTaskSwitchContext+0xa0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <vTaskSwitchContext+0xa4>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003da8:	e03e      	b.n	8003e28 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <vTaskSwitchContext+0xa4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <vTaskSwitchContext+0xa8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f1c3 031f 	rsb	r3, r3, #31
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	491e      	ldr	r1, [pc, #120]	; (8003e40 <vTaskSwitchContext+0xac>)
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <vTaskSwitchContext+0x5a>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	e7fe      	b.n	8003dec <vTaskSwitchContext+0x58>
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <vTaskSwitchContext+0xac>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d104      	bne.n	8003e1e <vTaskSwitchContext+0x8a>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <vTaskSwitchContext+0xb0>)
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	200003cc 	.word	0x200003cc
 8003e38:	200003b8 	.word	0x200003b8
 8003e3c:	200003ac 	.word	0x200003ac
 8003e40:	200002a8 	.word	0x200002a8
 8003e44:	200002a4 	.word	0x200002a4

08003e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e50:	f000 f852 	bl	8003ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <prvIdleTask+0x28>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d9f9      	bls.n	8003e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <prvIdleTask+0x2c>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e6c:	e7f0      	b.n	8003e50 <prvIdleTask+0x8>
 8003e6e:	bf00      	nop
 8003e70:	200002a8 	.word	0x200002a8
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	e00c      	b.n	8003e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <prvInitialiseTaskLists+0x60>)
 8003e90:	4413      	add	r3, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fb47 	bl	8003526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d9ef      	bls.n	8003e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <prvInitialiseTaskLists+0x64>)
 8003ea6:	f7ff fb3e 	bl	8003526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003eaa:	480d      	ldr	r0, [pc, #52]	; (8003ee0 <prvInitialiseTaskLists+0x68>)
 8003eac:	f7ff fb3b 	bl	8003526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003eb0:	480c      	ldr	r0, [pc, #48]	; (8003ee4 <prvInitialiseTaskLists+0x6c>)
 8003eb2:	f7ff fb38 	bl	8003526 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eb6:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <prvInitialiseTaskLists+0x70>)
 8003eb8:	f7ff fb35 	bl	8003526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <prvInitialiseTaskLists+0x74>)
 8003ebe:	f7ff fb32 	bl	8003526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvInitialiseTaskLists+0x78>)
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <prvInitialiseTaskLists+0x64>)
 8003ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvInitialiseTaskLists+0x7c>)
 8003eca:	4a05      	ldr	r2, [pc, #20]	; (8003ee0 <prvInitialiseTaskLists+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200002a8 	.word	0x200002a8
 8003edc:	20000334 	.word	0x20000334
 8003ee0:	20000348 	.word	0x20000348
 8003ee4:	20000364 	.word	0x20000364
 8003ee8:	20000378 	.word	0x20000378
 8003eec:	20000390 	.word	0x20000390
 8003ef0:	2000035c 	.word	0x2000035c
 8003ef4:	20000360 	.word	0x20000360

08003ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003efe:	e019      	b.n	8003f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f00:	f000 fa04 	bl	800430c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <prvCheckTasksWaitingTermination+0x4c>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fb92 	bl	800363a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <prvCheckTasksWaitingTermination+0x50>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <prvCheckTasksWaitingTermination+0x50>)
 8003f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <prvCheckTasksWaitingTermination+0x54>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <prvCheckTasksWaitingTermination+0x54>)
 8003f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f2a:	f000 fa1d 	bl	8004368 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f80e 	bl	8003f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <prvCheckTasksWaitingTermination+0x54>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e1      	bne.n	8003f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000378 	.word	0x20000378
 8003f48:	200003a4 	.word	0x200003a4
 8003f4c:	2000038c 	.word	0x2000038c

08003f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fb6e 	bl	8004648 <vPortFree>
				vPortFree( pxTCB );
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fb6b 	bl	8004648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f72:	e017      	b.n	8003fa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d103      	bne.n	8003f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fb62 	bl	8004648 <vPortFree>
	}
 8003f84:	e00e      	b.n	8003fa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d009      	beq.n	8003fa4 <prvDeleteTCB+0x54>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e7fe      	b.n	8003fa2 <prvDeleteTCB+0x52>
	}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <prvResetNextTaskUnblockTime+0x38>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fc4:	e008      	b.n	8003fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <prvResetNextTaskUnblockTime+0x38>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	2000035c 	.word	0x2000035c
 8003fe8:	200003c4 	.word	0x200003c4

08003fec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fb19 	bl	800363a <uxListRemove>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2201      	movs	r2, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4013      	ands	r3, r2
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d10a      	bne.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	481a      	ldr	r0, [pc, #104]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800403e:	f7ff fa9f 	bl	8003580 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004042:	e026      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d209      	bcs.n	8004070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7ff faad 	bl	80035c8 <vListInsert>
}
 800406e:	e010      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7ff faa3 	bl	80035c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d202      	bcs.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200003a8 	.word	0x200003a8
 80040a0:	200002a4 	.word	0x200002a4
 80040a4:	200003ac 	.word	0x200003ac
 80040a8:	20000390 	.word	0x20000390
 80040ac:	20000360 	.word	0x20000360
 80040b0:	2000035c 	.word	0x2000035c
 80040b4:	200003c4 	.word	0x200003c4

080040b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b04      	subs	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b04      	subs	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <pxPortInitialiseStack+0x64>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b14      	subs	r3, #20
 80040f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b04      	subs	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f06f 0202 	mvn.w	r2, #2
 8004106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b20      	subs	r3, #32
 800410c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	08004121 	.word	0x08004121

08004120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <prvTaskExitError+0x50>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d009      	beq.n	8004148 <prvTaskExitError+0x28>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e7fe      	b.n	8004146 <prvTaskExitError+0x26>
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800415a:	bf00      	nop
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0fc      	beq.n	800415c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000010 	.word	0x20000010
	...

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ca:	bf00      	nop
 80041cc:	e000ed08 	.word	0xe000ed08

080041d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041d6:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <xPortStartScheduler+0x118>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a44      	ldr	r2, [pc, #272]	; (80042ec <xPortStartScheduler+0x11c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d109      	bne.n	80041f4 <xPortStartScheduler+0x24>
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e7fe      	b.n	80041f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041f4:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <xPortStartScheduler+0x118>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3d      	ldr	r2, [pc, #244]	; (80042f0 <xPortStartScheduler+0x120>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d109      	bne.n	8004212 <xPortStartScheduler+0x42>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e7fe      	b.n	8004210 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004212:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <xPortStartScheduler+0x124>)
 8004214:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <xPortStartScheduler+0x128>)
 8004238:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800423a:	4b30      	ldr	r3, [pc, #192]	; (80042fc <xPortStartScheduler+0x12c>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004240:	e009      	b.n	8004256 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <xPortStartScheduler+0x12c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <xPortStartScheduler+0x12c>)
 800424a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d0ef      	beq.n	8004242 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <xPortStartScheduler+0x12c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1c3 0307 	rsb	r3, r3, #7
 800426a:	2b04      	cmp	r3, #4
 800426c:	d009      	beq.n	8004282 <xPortStartScheduler+0xb2>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	e7fe      	b.n	8004280 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <xPortStartScheduler+0x12c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <xPortStartScheduler+0x12c>)
 800428a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <xPortStartScheduler+0x12c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <xPortStartScheduler+0x12c>)
 8004296:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <xPortStartScheduler+0x130>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a16      	ldr	r2, [pc, #88]	; (8004300 <xPortStartScheduler+0x130>)
 80042a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <xPortStartScheduler+0x130>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <xPortStartScheduler+0x130>)
 80042b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042b8:	f000 f8d6 	bl	8004468 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <xPortStartScheduler+0x134>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042c2:	f000 f8f5 	bl	80044b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <xPortStartScheduler+0x138>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <xPortStartScheduler+0x138>)
 80042cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042d2:	f7ff ff69 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042d6:	f7ff fd5d 	bl	8003d94 <vTaskSwitchContext>
	prvTaskExitError();
 80042da:	f7ff ff21 	bl	8004120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	e000ed00 	.word	0xe000ed00
 80042ec:	410fc271 	.word	0x410fc271
 80042f0:	410fc270 	.word	0x410fc270
 80042f4:	e000e400 	.word	0xe000e400
 80042f8:	200003d0 	.word	0x200003d0
 80042fc:	200003d4 	.word	0x200003d4
 8004300:	e000ed20 	.word	0xe000ed20
 8004304:	20000010 	.word	0x20000010
 8004308:	e000ef34 	.word	0xe000ef34

0800430c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <vPortEnterCritical+0x54>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <vPortEnterCritical+0x54>)
 800432c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <vPortEnterCritical+0x54>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10e      	bne.n	8004354 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <vPortEnterCritical+0x58>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <vPortEnterCritical+0x48>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	e7fe      	b.n	8004352 <vPortEnterCritical+0x46>
	}
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20000010 	.word	0x20000010
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <vPortExitCritical+0x4c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <vPortExitCritical+0x22>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e7fe      	b.n	8004388 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <vPortExitCritical+0x4c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <vPortExitCritical+0x4c>)
 8004392:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <vPortExitCritical+0x4c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <vPortExitCritical+0x3e>
 800439c:	2300      	movs	r3, #0
 800439e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010
	...

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7ff fcd0 	bl	8003d94 <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004440:	f7ff fbf0 	bl	8003c24 <xTaskIncrementTick>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <SysTick_Handler+0x3c>)
 800444c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <vPortSetupTimerInterrupt+0x34>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortSetupTimerInterrupt+0x38>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <vPortSetupTimerInterrupt+0x3c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <vPortSetupTimerInterrupt+0x40>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <vPortSetupTimerInterrupt+0x44>)
 8004486:	3b01      	subs	r3, #1
 8004488:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <vPortSetupTimerInterrupt+0x34>)
 800448c:	2207      	movs	r2, #7
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000e010 	.word	0xe000e010
 80044a0:	e000e018 	.word	0xe000e018
 80044a4:	20000004 	.word	0x20000004
 80044a8:	10624dd3 	.word	0x10624dd3
 80044ac:	e000e014 	.word	0xe000e014

080044b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044c0 <vPortEnableVFP+0x10>
 80044b4:	6801      	ldr	r1, [r0, #0]
 80044b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ba:	6001      	str	r1, [r0, #0]
 80044bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044be:	bf00      	nop
 80044c0:	e000ed88 	.word	0xe000ed88

080044c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044d0:	f7ff fafe 	bl	8003ad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044d4:	4b57      	ldr	r3, [pc, #348]	; (8004634 <pvPortMalloc+0x170>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044dc:	f000 f90c 	bl	80046f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044e0:	4b55      	ldr	r3, [pc, #340]	; (8004638 <pvPortMalloc+0x174>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 808c 	bne.w	8004606 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01c      	beq.n	800452e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80044f4:	2208      	movs	r2, #8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d013      	beq.n	800452e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f023 0307 	bic.w	r3, r3, #7
 800450c:	3308      	adds	r3, #8
 800450e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <pvPortMalloc+0x6a>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e7fe      	b.n	800452c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d068      	beq.n	8004606 <pvPortMalloc+0x142>
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <pvPortMalloc+0x178>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d863      	bhi.n	8004606 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800453e:	4b40      	ldr	r3, [pc, #256]	; (8004640 <pvPortMalloc+0x17c>)
 8004540:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <pvPortMalloc+0x17c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004548:	e004      	b.n	8004554 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d903      	bls.n	8004566 <pvPortMalloc+0xa2>
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f1      	bne.n	800454a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004566:	4b33      	ldr	r3, [pc, #204]	; (8004634 <pvPortMalloc+0x170>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	429a      	cmp	r2, r3
 800456e:	d04a      	beq.n	8004606 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2208      	movs	r2, #8
 8004576:	4413      	add	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad2      	subs	r2, r2, r3
 800458a:	2308      	movs	r3, #8
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	429a      	cmp	r2, r3
 8004590:	d91e      	bls.n	80045d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <pvPortMalloc+0xf4>
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e7fe      	b.n	80045b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ca:	69b8      	ldr	r0, [r7, #24]
 80045cc:	f000 f8f6 	bl	80047bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <pvPortMalloc+0x178>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <pvPortMalloc+0x178>)
 80045dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045de:	4b17      	ldr	r3, [pc, #92]	; (800463c <pvPortMalloc+0x178>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b18      	ldr	r3, [pc, #96]	; (8004644 <pvPortMalloc+0x180>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d203      	bcs.n	80045f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <pvPortMalloc+0x178>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a15      	ldr	r2, [pc, #84]	; (8004644 <pvPortMalloc+0x180>)
 80045f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <pvPortMalloc+0x174>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004606:	f7ff fa71 	bl	8003aec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <pvPortMalloc+0x164>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e7fe      	b.n	8004626 <pvPortMalloc+0x162>
	return pvReturn;
 8004628:	69fb      	ldr	r3, [r7, #28]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	; 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20003fe0 	.word	0x20003fe0
 8004638:	20003fec 	.word	0x20003fec
 800463c:	20003fe4 	.word	0x20003fe4
 8004640:	20003fd8 	.word	0x20003fd8
 8004644:	20003fe8 	.word	0x20003fe8

08004648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d046      	beq.n	80046e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800465a:	2308      	movs	r3, #8
 800465c:	425b      	negs	r3, r3
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <vPortFree+0xa8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <vPortFree+0x42>
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e7fe      	b.n	8004688 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <vPortFree+0x5e>
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	e7fe      	b.n	80046a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <vPortFree+0xa8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d115      	bne.n	80046e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <vPortFree+0xa8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046cc:	f7ff fa00 	bl	8003ad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <vPortFree+0xac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4413      	add	r3, r2
 80046da:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <vPortFree+0xac>)
 80046dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046de:	6938      	ldr	r0, [r7, #16]
 80046e0:	f000 f86c 	bl	80047bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046e4:	f7ff fa02 	bl	8003aec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20003fec 	.word	0x20003fec
 80046f4:	20003fe4 	.word	0x20003fe4

080046f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <prvHeapInit+0xac>)
 8004706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3307      	adds	r3, #7
 8004716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <prvHeapInit+0xac>)
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <prvHeapInit+0xb0>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <prvHeapInit+0xb0>)
 8004738:	2200      	movs	r2, #0
 800473a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4413      	add	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004744:	2208      	movs	r2, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a15      	ldr	r2, [pc, #84]	; (80047ac <prvHeapInit+0xb4>)
 8004758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <prvHeapInit+0xb4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <prvHeapInit+0xb4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <prvHeapInit+0xb4>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <prvHeapInit+0xb8>)
 8004786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <prvHeapInit+0xbc>)
 800478e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <prvHeapInit+0xc0>)
 8004792:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004796:	601a      	str	r2, [r3, #0]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	200003d8 	.word	0x200003d8
 80047a8:	20003fd8 	.word	0x20003fd8
 80047ac:	20003fe0 	.word	0x20003fe0
 80047b0:	20003fe8 	.word	0x20003fe8
 80047b4:	20003fe4 	.word	0x20003fe4
 80047b8:	20003fec 	.word	0x20003fec

080047bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047c4:	4b28      	ldr	r3, [pc, #160]	; (8004868 <prvInsertBlockIntoFreeList+0xac>)
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e002      	b.n	80047d0 <prvInsertBlockIntoFreeList+0x14>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d8f7      	bhi.n	80047ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d108      	bne.n	80047fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	441a      	add	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	441a      	add	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d118      	bne.n	8004844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <prvInsertBlockIntoFreeList+0xb0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d00d      	beq.n	800483a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e008      	b.n	800484c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <prvInsertBlockIntoFreeList+0xb0>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e003      	b.n	800484c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d002      	beq.n	800485a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20003fd8 	.word	0x20003fd8
 800486c:	20003fe0 	.word	0x20003fe0

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0d      	ldr	r6, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1ba4      	subs	r4, r4, r6
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2500      	movs	r5, #0
 800487c:	42a5      	cmp	r5, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4e0b      	ldr	r6, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 f820 	bl	80048c8 <_init>
 8004888:	1ba4      	subs	r4, r4, r6
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2500      	movs	r5, #0
 800488e:	42a5      	cmp	r5, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004898:	4798      	blx	r3
 800489a:	3501      	adds	r5, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a2:	4798      	blx	r3
 80048a4:	3501      	adds	r5, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	08004938 	.word	0x08004938
 80048ac:	08004938 	.word	0x08004938
 80048b0:	08004938 	.word	0x08004938
 80048b4:	0800493c 	.word	0x0800493c

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
